name: Branch Strategy Tests

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  GO_VERSION: '1.21'

jobs:
  # 确定分支类型和测试策略
  determine-strategy:
    name: Determine Test Strategy
    runs-on: ubuntu-latest
    outputs:
      branch-type: ${{ steps.branch-type.outputs.type }}
      test-level: ${{ steps.test-level.outputs.level }}
      security-required: ${{ steps.security.outputs.required }}
      performance-required: ${{ steps.performance.outputs.required }}
    steps:
    - name: Determine branch type
      id: branch-type
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "type=main" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "type=develop" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/heads/feature/* ]]; then
          echo "type=feature" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/heads/bugfix/* ]]; then
          echo "type=bugfix" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          echo "type=release" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/heads/hotfix/* ]]; then
          echo "type=hotfix" >> $GITHUB_OUTPUT
        else
          echo "type=other" >> $GITHUB_OUTPUT
        fi

    - name: Determine test level
      id: test-level
      run: |
        case "${{ steps.branch-type.outputs.type }}" in
          "main")
            echo "level=full" >> $GITHUB_OUTPUT
            ;;
          "develop")
            echo "level=comprehensive" >> $GITHUB_OUTPUT
            ;;
          "release")
            echo "level=release" >> $GITHUB_OUTPUT
            ;;
          "hotfix")
            echo "level=critical" >> $GITHUB_OUTPUT
            ;;
          "feature"|"bugfix")
            echo "level=standard" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "level=basic" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Determine security requirements
      id: security
      run: |
        case "${{ steps.branch-type.outputs.type }}" in
          "main"|"release"|"hotfix")
            echo "required=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "required=false" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Determine performance requirements
      id: performance
      run: |
        case "${{ steps.branch-type.outputs.type }}" in
          "main"|"release")
            echo "required=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "required=false" >> $GITHUB_OUTPUT
            ;;
        esac

  # 基础测试（所有分支）
  basic-tests:
    name: Basic Tests
    runs-on: ubuntu-latest
    needs: determine-strategy
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run unit tests
      run: |
        echo "Running basic unit tests for ${{ needs.determine-strategy.outputs.branch-type }} branch"
        go test -short -v ./...

    - name: Basic build check
      run: |
        echo "Running basic build check"
        go build -v ./cmd/hpn

  # 标准测试（feature/bugfix分支）
  standard-tests:
    name: Standard Tests
    runs-on: ubuntu-latest
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.test-level == 'standard'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run full unit tests
      run: |
        echo "Running full unit tests with race detection"
        go test -race -v ./...

    - name: Run integration tests
      run: |
        echo "Running integration tests"
        go test -tags=integration -v ./...

    - name: Cross-platform build test
      run: |
        echo "Testing cross-platform builds"
        GOOS=linux GOARCH=amd64 go build ./cmd/hpn
        GOOS=windows GOARCH=amd64 go build ./cmd/hpn
        GOOS=darwin GOARCH=amd64 go build ./cmd/hpn

  # 综合测试（develop分支）
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ${{ matrix.os }}
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.test-level == 'comprehensive'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run comprehensive tests
      run: |
        echo "Running comprehensive test suite on ${{ matrix.os }}"
        go test -race -coverprofile=coverage.out ./...

    - name: Run integration tests
      run: |
        echo "Running integration tests"
        go test -tags=integration -v ./...

    - name: Build and test functionality
      run: |
        go build -o hpn ./cmd/hpn
        
        # Platform-specific testing
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          chmod +x ./hpn
          ./hpn --version
          ./hpn --help | head -10
        else
          ./hpn.exe --version
          ./hpn.exe --help
        fi

  # 发布测试（release分支）
  release-tests:
    name: Release Tests
    runs-on: ubuntu-latest
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.test-level == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run release test suite
      run: |
        echo "Running release-specific test suite"
        go test -tags=release -race -v ./...

    - name: Build all platforms
      run: |
        echo "Building for all supported platforms"
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r GOOS GOARCH <<< "$platform"
          echo "Building for $GOOS/$GOARCH"
          
          if [ "$GOOS" = "windows" ]; then
            GOOS=$GOOS GOARCH=$GOARCH go build -o hpn-$GOOS-$GOARCH.exe ./cmd/hpn
          else
            GOOS=$GOOS GOARCH=$GOARCH go build -o hpn-$GOOS-$GOARCH ./cmd/hpn
          fi
        done

    - name: Test release artifacts
      run: |
        echo "Testing release artifacts"
        ./hpn-linux-amd64 --version
        
        # 验证版本信息
        VERSION=$(./hpn-linux-amd64 --version | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')
        if [[ -n "$VERSION" ]]; then
          echo "✅ Version detected: $VERSION"
        else
          echo "❌ Version not properly set"
          exit 1
        fi

    - name: Package validation
      run: |
        echo "Validating package contents"
        
        # 检查必要文件
        required_files=("README.md" "LICENSE" "docs/")
        for file in "${required_files[@]}"; do
          if [[ -e "$file" ]]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
            exit 1
          fi
        done

  # 关键测试（hotfix分支）
  critical-tests:
    name: Critical Tests
    runs-on: ubuntu-latest
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.test-level == 'critical'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run critical tests only
      run: |
        echo "Running critical tests for hotfix"
        # 只运行关键测试，跳过耗时的测试
        go test -short -run="Test.*Critical|Test.*Security|Test.*Core" ./...

    - name: Fast security scan
      run: |
        echo "Running fast security scan"
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -quiet -severity medium ./...

    - name: Validate hotfix scope
      run: |
        echo "Validating hotfix changes"
        # 检查变更范围是否合理
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          files_changed=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/files" | \
            jq '.[] | .filename' | wc -l)
          
          if [[ $files_changed -gt 5 ]]; then
            echo "⚠️  Hotfix changes $files_changed files - consider if this should be a regular release"
          else
            echo "✅ Hotfix scope is appropriate ($files_changed files)"
          fi
        fi

  # 完整测试（main分支）
  full-tests:
    name: Full Test Suite
    runs-on: ${{ matrix.os }}
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.test-level == 'full'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.19', '1.20', '1.21']
        exclude:
          # 减少矩阵大小
          - os: windows-latest
            go-version: '1.19'
          - os: macos-latest
            go-version: '1.19'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Run full test suite
      run: |
        echo "Running full test suite on ${{ matrix.os }} with Go ${{ matrix.go-version }}"
        go test -race -coverprofile=coverage.out ./...

    - name: Run all test categories
      run: |
        echo "Running integration tests"
        go test -tags=integration -v ./...
        
        echo "Running end-to-end tests"
        go test -tags=e2e -v ./...

  # 安全测试（根据需要）
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.security-required == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Comprehensive security scan
      run: |
        echo "Running comprehensive security analysis"
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out security-results.sarif ./...

    - name: Vulnerability check
      run: |
        echo "Checking for known vulnerabilities"
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: security-results.sarif

  # 性能测试（根据需要）
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [determine-strategy, basic-tests]
    if: needs.determine-strategy.outputs.performance-required == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run benchmarks
      run: |
        echo "Running performance benchmarks"
        go test -bench=. -benchmem -run=^$ ./... | tee benchmark-results.txt

    - name: Performance regression check
      run: |
        echo "Checking for performance regressions"
        # 这里可以添加与基准版本的性能对比逻辑
        echo "Benchmark results saved for analysis"

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.txt

  # 测试结果汇总
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [determine-strategy, basic-tests, standard-tests, comprehensive-tests, release-tests, critical-tests, full-tests, security-tests, performance-tests]
    if: always()
    steps:
    - name: Generate test summary
      run: |
        echo "=== Branch Strategy Test Summary ===" 
        echo "Branch Type: ${{ needs.determine-strategy.outputs.branch-type }}"
        echo "Test Level: ${{ needs.determine-strategy.outputs.test-level }}"
        echo "Security Required: ${{ needs.determine-strategy.outputs.security-required }}"
        echo "Performance Required: ${{ needs.determine-strategy.outputs.performance-required }}"
        echo ""
        
        echo "Test Results:"
        echo "- Basic Tests: ${{ needs.basic-tests.result }}"
        echo "- Standard Tests: ${{ needs.standard-tests.result || 'skipped' }}"
        echo "- Comprehensive Tests: ${{ needs.comprehensive-tests.result || 'skipped' }}"
        echo "- Release Tests: ${{ needs.release-tests.result || 'skipped' }}"
        echo "- Critical Tests: ${{ needs.critical-tests.result || 'skipped' }}"
        echo "- Full Tests: ${{ needs.full-tests.result || 'skipped' }}"
        echo "- Security Tests: ${{ needs.security-tests.result || 'skipped' }}"
        echo "- Performance Tests: ${{ needs.performance-tests.result || 'skipped' }}"

    - name: Check required tests passed
      run: |
        # 检查必需的测试是否通过
        BASIC_STATUS="${{ needs.basic-tests.result }}"
        
        if [[ "$BASIC_STATUS" != "success" ]]; then
          echo "❌ Basic tests failed - this is blocking"
          exit 1
        fi
        
        # 根据分支类型检查其他必需测试
        case "${{ needs.determine-strategy.outputs.test-level }}" in
          "standard")
            if [[ "${{ needs.standard-tests.result }}" != "success" ]]; then
              echo "❌ Standard tests failed"
              exit 1
            fi
            ;;
          "comprehensive")
            if [[ "${{ needs.comprehensive-tests.result }}" != "success" ]]; then
              echo "❌ Comprehensive tests failed"
              exit 1
            fi
            ;;
          "release")
            if [[ "${{ needs.release-tests.result }}" != "success" ]]; then
              echo "❌ Release tests failed"
              exit 1
            fi
            ;;
          "critical")
            if [[ "${{ needs.critical-tests.result }}" != "success" ]]; then
              echo "❌ Critical tests failed"
              exit 1
            fi
            ;;
          "full")
            if [[ "${{ needs.full-tests.result }}" != "success" ]]; then
              echo "❌ Full tests failed"
              exit 1
            fi
            ;;
        esac
        
        echo "✅ All required tests for ${{ needs.determine-strategy.outputs.branch-type }} branch passed"