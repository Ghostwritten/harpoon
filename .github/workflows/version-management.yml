name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - alpha
        - beta
        - rc
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

env:
  GO_VERSION: '1.21'

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Make scripts executable
      run: |
        chmod +x scripts/version.sh
        chmod +x scripts/build.sh

    - name: Get current version
      id: current
      run: |
        CURRENT_VERSION=$(./scripts/version.sh current | grep "Version:" | awk '{print $2}')
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: bump
      run: |
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
          echo "Using custom version: $NEW_VERSION"
          
          # Validate custom version
          if ! ./scripts/version.sh validate "$NEW_VERSION"; then
            echo "Invalid custom version format"
            exit 1
          fi
        else
          NEW_VERSION=$(./scripts/version.sh next "${{ github.event.inputs.version_type }}")
          echo "Calculated new version: $NEW_VERSION"
        fi
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"

    - name: Update version files
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        
        # Update internal/version/version.go
        sed -i "s/Version.*=.*/Version = \"$NEW_VERSION\"/" internal/version/version.go
        
        # Update README.md version badge
        sed -i "s/version-v[0-9]\+\.[0-9]\+\.[0-9]\+[^)]*)/version-$NEW_VERSION)/g" README.md
        
        # Verify changes
        echo "Updated files:"
        git diff --name-only

    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog..."
        CHANGELOG=$(./scripts/version.sh changelog)
        
        # Save changelog to file for GitHub release
        echo "$CHANGELOG" > CHANGELOG_TEMP.md
        
        # Set output (escape newlines for GitHub Actions)
        {
          echo 'changelog<<EOF'
          echo "$CHANGELOG"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Update changelog file
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        CURRENT_DATE=$(date -u +"%Y-%m-%d")
        
        # Create new changelog entry
        {
          echo "# Changelog"
          echo ""
          echo "## [$NEW_VERSION] - $CURRENT_DATE"
          echo ""
          ./scripts/version.sh changelog | tail -n +3
          echo ""
          if [ -f "docs/changelog.md" ]; then
            tail -n +2 docs/changelog.md
          fi
        } > docs/changelog.md.new
        
        mv docs/changelog.md.new docs/changelog.md

    - name: Commit version bump
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        
        git add internal/version/version.go README.md docs/changelog.md
        git commit -m "chore: bump version to $NEW_VERSION

        - Update version in internal/version/version.go
        - Update version badge in README.md  
        - Update changelog with latest changes
        
        [skip ci]"

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.bump.outputs.new-version }}"
        
        # Create annotated tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        
        # Push changes and tag
        git push origin HEAD
        git push origin "$NEW_VERSION"

    - name: Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog
        path: CHANGELOG_TEMP.md

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: version-bump
    if: github.event.inputs.create_release == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.version-bump.outputs.new-version }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Make build script executable
      run: chmod +x scripts/build.sh

    - name: Build all platforms
      run: |
        mkdir -p dist
        ./scripts/build.sh -o dist -p all -v

    - name: Create release packages
      run: |
        cd dist
        VERSION="${{ needs.version-bump.outputs.new-version }}"
        
        # Create compressed packages
        for binary in hpn-*; do
          if [[ "$binary" == *.exe ]]; then
            # Windows binary
            platform=${binary#hpn-}
            platform=${platform%.exe}
            zip -r "hpn-${VERSION}-${platform}.zip" "$binary" ../README.md ../LICENSE ../docs/
          else
            # Unix binary
            platform=${binary#hpn-}
            tar -czf "hpn-${VERSION}-${platform}.tar.gz" "$binary" ../README.md ../LICENSE ../docs/
          fi
        done
        
        # List created packages
        ls -la *.tar.gz *.zip

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: |
          dist/*.tar.gz
          dist/*.zip

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-bump, build-release]
    if: github.event.inputs.create_release == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.version-bump.outputs.new-version }}

    - name: Download changelog
      uses: actions/download-artifact@v3
      with:
        name: changelog

    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        path: assets/

    - name: Create GitHub Release
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const version = '${{ needs.version-bump.outputs.new-version }}';
          const isPrerelease = '${{ github.event.inputs.prerelease }}' === 'true';
          
          // Read changelog
          let changelog = '';
          try {
            changelog = fs.readFileSync('CHANGELOG_TEMP.md', 'utf8');
          } catch (error) {
            changelog = 'Release notes will be added soon.';
          }
          
          // Create release
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: version,
            name: `Harpoon ${version}`,
            body: changelog,
            draft: false,
            prerelease: isPrerelease
          });
          
          console.log(`Created release: ${release.data.html_url}`);
          
          // Upload assets
          const assetsDir = 'assets';
          const files = fs.readdirSync(assetsDir);
          
          for (const file of files) {
            if (file.endsWith('.tar.gz') || file.endsWith('.zip')) {
              const filePath = path.join(assetsDir, file);
              const fileContent = fs.readFileSync(filePath);
              
              console.log(`Uploading ${file}...`);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: file,
                data: fileContent
              });
              
              console.log(`Uploaded ${file}`);
            }
          }

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [version-bump, build-release, create-github-release]
    if: always()
    steps:
    - name: Summary
      run: |
        echo "## 🎉 Version Management Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "- **New Version**: ${{ needs.version-bump.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version Bump**: ${{ needs.version-bump.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Release**: ${{ needs.build-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub Release**: ${{ needs.create-github-release.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.version-bump.result }}" = "success" ]; then
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the new tag: \`${{ needs.version-bump.outputs.new-version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Check the updated changelog" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.create_release }}" = "true" ]; then
            echo "3. Review the GitHub release" >> $GITHUB_STEP_SUMMARY
            echo "4. Test the release binaries" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "### ❌ Version bump failed" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi