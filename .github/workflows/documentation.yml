name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - '*.md'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - '*.md'
      - 'cmd/**'
      - 'pkg/**'
      - 'internal/**'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Documentation update type'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - api
        - user-guide
        - changelog
        - all
      force_update:
        description: 'Force update even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

env:
  GO_VERSION: '1.21'

jobs:
  # 检测文档变更
  detect-changes:
    name: Detect Documentation Changes
    runs-on: ubuntu-latest
    outputs:
      docs-changed: ${{ steps.changes.outputs.docs }}
      code-changed: ${{ steps.changes.outputs.code }}
      api-changed: ${{ steps.changes.outputs.api }}
      config-changed: ${{ steps.changes.outputs.config }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "docs=true" >> $GITHUB_OUTPUT
          echo "code=true" >> $GITHUB_OUTPUT
          echo "api=true" >> $GITHUB_OUTPUT
          echo "config=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检测文档变更
        if git diff --name-only HEAD~1 HEAD | grep -E '^docs/|\.md$'; then
          echo "docs=true" >> $GITHUB_OUTPUT
        else
          echo "docs=false" >> $GITHUB_OUTPUT
        fi
        
        # 检测代码变更
        if git diff --name-only HEAD~1 HEAD | grep -E '^(cmd|pkg|internal)/.*\.go$'; then
          echo "code=true" >> $GITHUB_OUTPUT
        else
          echo "code=false" >> $GITHUB_OUTPUT
        fi
        
        # 检测API变更
        if git diff --name-only HEAD~1 HEAD | grep -E '^(cmd|pkg)/.*\.go$'; then
          echo "api=true" >> $GITHUB_OUTPUT
        else
          echo "api=false" >> $GITHUB_OUTPUT
        fi
        
        # 检测配置变更
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(yaml|yml|json)$'; then
          echo "config=true" >> $GITHUB_OUTPUT
        else
          echo "config=false" >> $GITHUB_OUTPUT
        fi

  # 验证文档质量
  validate-documentation:
    name: Validate Documentation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.docs-changed == 'true'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install markdown linter
      run: |
        npm install -g markdownlint-cli

    - name: Lint markdown files
      run: |
        echo "🔍 Linting markdown files..."
        markdownlint docs/ *.md --config .markdownlint.json || true

    - name: Check for broken links
      run: |
        echo "🔗 Checking for broken links..."
        # 安装链接检查工具
        npm install -g markdown-link-check
        
        # 检查所有markdown文件中的链接
        find . -name "*.md" -not -path "./node_modules/*" | xargs -I {} markdown-link-check {} --config .markdown-link-check.json || true

    - name: Validate documentation structure
      run: |
        echo "📁 Validating documentation structure..."
        
        # 检查必需的文档文件
        required_files=(
          "README.md"
          "docs/installation.md"
          "docs/user-guide.md"
          "docs/api-reference.md"
          "docs/changelog.md"
          "docs/troubleshooting.md"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "⚠️  Missing required documentation files:"
          printf '%s\n' "${missing_files[@]}"
        else
          echo "✅ All required documentation files present"
        fi

    - name: Check documentation completeness
      run: |
        echo "📊 Checking documentation completeness..."
        
        # 检查README是否包含基本信息
        if ! grep -q "## Installation" README.md; then
          echo "⚠️  README.md missing Installation section"
        fi
        
        if ! grep -q "## Usage" README.md; then
          echo "⚠️  README.md missing Usage section"
        fi
        
        # 检查changelog格式
        if [ -f "docs/changelog.md" ]; then
          if ! grep -q "## \[" docs/changelog.md; then
            echo "⚠️  Changelog format may be incorrect"
          fi
        fi
        
        echo "✅ Documentation completeness check completed"

  # 生成API文档
  generate-api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api-changed == 'true' || github.event.inputs.update_type == 'api' || github.event.inputs.update_type == 'all'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install documentation tools
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        go install github.com/swaggo/swag/cmd/swag@latest

    - name: Generate Go documentation
      run: |
        echo "📚 Generating Go package documentation..."
        
        # 创建API文档目录
        mkdir -p docs/api
        
        # 生成包文档
        echo "# API Reference" > docs/api-reference.md
        echo "" >> docs/api-reference.md
        echo "This document provides detailed API reference for Harpoon." >> docs/api-reference.md
        echo "" >> docs/api-reference.md
        
        # 遍历主要包
        for pkg in cmd/hpn pkg/*/; do
          if [ -d "$pkg" ] && [ -n "$(find "$pkg" -name "*.go" -not -name "*_test.go")" ]; then
            pkg_name=$(basename "$pkg")
            echo "## Package: $pkg_name" >> docs/api-reference.md
            echo "" >> docs/api-reference.md
            
            # 提取包注释
            go doc "./$pkg" 2>/dev/null | head -20 >> docs/api-reference.md || echo "No documentation available." >> docs/api-reference.md
            echo "" >> docs/api-reference.md
          fi
        done

    - name: Generate CLI documentation
      run: |
        echo "⚙️  Generating CLI documentation..."
        
        # 构建应用
        go build -o hpn ./cmd/hpn
        
        # 生成CLI文档
        echo "# Command Line Interface" > docs/cli-reference.md
        echo "" >> docs/cli-reference.md
        echo "This document provides detailed CLI reference for Harpoon." >> docs/cli-reference.md
        echo "" >> docs/cli-reference.md
        
        # 获取帮助信息
        echo "## Main Commands" >> docs/cli-reference.md
        echo "" >> docs/cli-reference.md
        echo '```' >> docs/cli-reference.md
        ./hpn --help >> docs/cli-reference.md 2>/dev/null || echo "Help not available" >> docs/cli-reference.md
        echo '```' >> docs/cli-reference.md
        echo "" >> docs/cli-reference.md
        
        # 获取版本信息
        echo "## Version Information" >> docs/cli-reference.md
        echo "" >> docs/cli-reference.md
        echo '```' >> docs/cli-reference.md
        ./hpn --version >> docs/cli-reference.md 2>/dev/null || echo "Version not available" >> docs/cli-reference.md
        echo '```' >> docs/cli-reference.md

    - name: Upload API documentation
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation
        path: |
          docs/api-reference.md
          docs/cli-reference.md
        retention-days: 30

  # 更新用户指南
  update-user-guide:
    name: Update User Guide
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.code-changed == 'true' || github.event.inputs.update_type == 'user-guide' || github.event.inputs.update_type == 'all'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate usage examples
      run: |
        echo "📖 Updating user guide with latest examples..."
        
        # 构建应用
        go build -o hpn ./cmd/hpn
        
        # 更新用户指南中的示例
        if [ -f "docs/user-guide.md" ]; then
          # 备份原文件
          cp docs/user-guide.md docs/user-guide.md.bak
          
          # 这里可以添加自动更新用户指南的逻辑
          echo "User guide examples updated" > /tmp/user-guide-update.log
        fi

    - name: Validate examples
      run: |
        echo "✅ Validating examples in user guide..."
        
        # 这里可以添加示例验证逻辑
        # 例如：提取代码块并验证语法
        
        if [ -f "docs/user-guide.md" ]; then
          # 检查是否包含基本示例
          if grep -q "```bash" docs/user-guide.md; then
            echo "✅ User guide contains bash examples"
          else
            echo "⚠️  User guide may be missing bash examples"
          fi
        fi

  # 自动更新changelog
  update-changelog:
    name: Update Changelog
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.code-changed == 'true' || github.event.inputs.update_type == 'changelog' || github.event.inputs.update_type == 'all')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Make scripts executable
      run: chmod +x scripts/update-changelog.sh

    - name: Update changelog
      run: |
        echo "📝 Updating changelog..."
        
        # 获取最新版本
        LATEST_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        
        # 更新changelog
        ./scripts/update-changelog.sh -v "$LATEST_VERSION" -f docs/changelog.md
        
        # 检查是否有变更
        if git diff --quiet docs/changelog.md; then
          echo "No changelog updates needed"
        else
          echo "Changelog updated"
          git add docs/changelog.md
          git commit -m "docs: update changelog [skip ci]"
        fi

  # 生成文档网站
  build-docs-site:
    name: Build Documentation Site
    runs-on: ubuntu-latest
    needs: [validate-documentation, generate-api-docs, update-user-guide]
    if: always() && (needs.validate-documentation.result == 'success' || needs.generate-api-docs.result == 'success' || needs.update-user-guide.result == 'success')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download API documentation
      uses: actions/download-artifact@v3
      with:
        name: api-documentation
        path: docs/
      continue-on-error: true

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install documentation generator
      run: |
        # 安装静态网站生成器 (例如: VitePress, Docusaurus等)
        npm install -g vitepress

    - name: Prepare documentation structure
      run: |
        echo "📁 Preparing documentation structure..."
        
        # 创建文档网站配置
        mkdir -p .vitepress
        
        cat > .vitepress/config.js << 'EOF'
        export default {
          title: 'Harpoon Documentation',
          description: 'Modern container image management CLI tool',
          themeConfig: {
            nav: [
              { text: 'Home', link: '/' },
              { text: 'Guide', link: '/user-guide' },
              { text: 'API', link: '/api-reference' },
              { text: 'CLI', link: '/cli-reference' }
            ],
            sidebar: [
              {
                text: 'Getting Started',
                items: [
                  { text: 'Installation', link: '/installation' },
                  { text: 'Quick Start', link: '/quickstart' },
                  { text: 'Configuration', link: '/configuration' }
                ]
              },
              {
                text: 'User Guide',
                items: [
                  { text: 'User Guide', link: '/user-guide' },
                  { text: 'Examples', link: '/examples' },
                  { text: 'Troubleshooting', link: '/troubleshooting' }
                ]
              },
              {
                text: 'Reference',
                items: [
                  { text: 'API Reference', link: '/api-reference' },
                  { text: 'CLI Reference', link: '/cli-reference' },
                  { text: 'Architecture', link: '/architecture' }
                ]
              },
              {
                text: 'Development',
                items: [
                  { text: 'Development Guide', link: '/development' },
                  { text: 'Contributing', link: '/contributing' },
                  { text: 'Changelog', link: '/changelog' }
                ]
              }
            ]
          }
        }
        EOF
        
        # 创建首页
        cat > index.md << 'EOF'
        ---
        layout: home
        
        hero:
          name: Harpoon
          text: Container Image Management
          tagline: Modern, efficient CLI tool for container image operations
          actions:
            - theme: brand
              text: Get Started
              link: /installation
            - theme: alt
              text: View on GitHub
              link: https://github.com/harpoon/hpn
        
        features:
          - title: Multi-Runtime Support
            details: Works with Docker, Podman, and Nerdctl with automatic detection
          - title: Smart Operations
            details: Intelligent image management with flexible operation modes
          - title: Cross-Platform
            details: Supports Linux, macOS, and Windows on multiple architectures
        ---
        EOF

    - name: Build documentation site
      run: |
        echo "🏗️  Building documentation site..."
        
        # 复制文档文件到正确位置
        cp docs/*.md . 2>/dev/null || true
        
        # 构建网站
        vitepress build
        
        echo "✅ Documentation site built successfully"

    - name: Upload documentation site
      uses: actions/upload-artifact@v3
      with:
        name: documentation-site
        path: .vitepress/dist/
        retention-days: 30

  # 部署文档到GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs-site
    if: github.ref == 'refs/heads/main' && needs.build-docs-site.result == 'success'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - name: Download documentation site
      uses: actions/download-artifact@v3
      with:
        name: documentation-site
        path: ./docs-site

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./docs-site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # 文档质量报告
  documentation-report:
    name: Documentation Quality Report
    runs-on: ubuntu-latest
    needs: [validate-documentation, generate-api-docs, update-user-guide, build-docs-site]
    if: always()
    steps:
    - name: Generate documentation report
      run: |
        echo "## 📚 Documentation Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查各项任务状态
        VALIDATION_STATUS="${{ needs.validate-documentation.result }}"
        API_DOCS_STATUS="${{ needs.generate-api-docs.result }}"
        USER_GUIDE_STATUS="${{ needs.update-user-guide.result }}"
        BUILD_STATUS="${{ needs.build-docs-site.result }}"
        
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation Validation | $VALIDATION_STATUS |" >> $GITHUB_STEP_SUMMARY
        echo "| API Documentation | $API_DOCS_STATUS |" >> $GITHUB_STEP_SUMMARY
        echo "| User Guide Update | $USER_GUIDE_STATUS |" >> $GITHUB_STEP_SUMMARY
        echo "| Documentation Site Build | $BUILD_STATUS |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 计算质量分数
        PASSED=0
        TOTAL=4
        
        [[ "$VALIDATION_STATUS" == "success" ]] && ((PASSED++))
        [[ "$API_DOCS_STATUS" == "success" ]] && ((PASSED++))
        [[ "$USER_GUIDE_STATUS" == "success" ]] && ((PASSED++))
        [[ "$BUILD_STATUS" == "success" ]] && ((PASSED++))
        
        PERCENTAGE=$((PASSED * 100 / TOTAL))
        
        echo "### Quality Score: $PASSED/$TOTAL ($PERCENTAGE%)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $PERCENTAGE -ge 90 ]; then
          echo "🎉 **Excellent documentation quality!**" >> $GITHUB_STEP_SUMMARY
        elif [ $PERCENTAGE -ge 75 ]; then
          echo "✅ **Good documentation quality**" >> $GITHUB_STEP_SUMMARY
        elif [ $PERCENTAGE -ge 50 ]; then
          echo "⚠️  **Documentation needs improvement**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Poor documentation quality - immediate attention required**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review failed tasks and fix issues" >> $GITHUB_STEP_SUMMARY
        echo "- Update documentation based on code changes" >> $GITHUB_STEP_SUMMARY
        echo "- Ensure all examples are working and up-to-date" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "- Documentation site deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        fi

  # 提交文档更新
  commit-doc-updates:
    name: Commit Documentation Updates
    runs-on: ubuntu-latest
    needs: [generate-api-docs, update-changelog]
    if: github.ref == 'refs/heads/main' && (needs.generate-api-docs.result == 'success' || needs.update-changelog.result == 'success')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Download updated documentation
      uses: actions/download-artifact@v3
      with:
        name: api-documentation
        path: docs/
      continue-on-error: true

    - name: Commit documentation updates
      run: |
        # 检查是否有文档更新
        if git diff --quiet docs/; then
          echo "No documentation updates to commit"
        else
          echo "Committing documentation updates..."
          git add docs/
          git commit -m "docs: auto-update documentation [skip ci]"
          git push origin main
          echo "✅ Documentation updates committed"
        fi