name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  checks: write

env:
  GO_VERSION: '1.21'

jobs:
  # 代码质量检查
  lint-check:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: gosec -fmt json -out gosec-report.json -stdout ./...

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: govulncheck ./...

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: gosec-report.json

  # 跨平台测试
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.19', '1.20', '1.21']
        exclude:
          # 减少矩阵大小，只在Ubuntu上测试所有Go版本
          - os: windows-latest
            go-version: '1.19'
          - os: windows-latest
            go-version: '1.20'
          - os: macos-latest
            go-version: '1.19'
          - os: macos-latest
            go-version: '1.20'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  # 构建检查
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint-check]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build for current platform
      run: go build -v ./cmd/hpn

    - name: Test basic functionality (Unix)
      run: |
        chmod +x ./hpn
        ./hpn --version
        ./hpn -v
        ./hpn -V
        ./hpn version
        ./hpn --help | head -20

    - name: Test error handling
      run: |
        # Test missing action (should fail)
        if ./hpn 2>&1 | grep -i "missing.*action"; then
          echo "✅ Error handling works"
        else
          echo "❌ Error handling failed"
          exit 1
        fi

  # 跨平台构建测试
  cross-compile:
    name: Cross Platform Build
    runs-on: ubuntu-latest
    needs: [build-check]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Test cross-compilation
      run: |
        # 定义构建目标
        platforms=(
          "linux/amd64"
          "linux/arm64" 
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -r GOOS GOARCH <<< "$platform"
          
          if [ "$GOOS" = "windows" ]; then
            output_name="hpn-${GOOS}-${GOARCH}.exe"
          else
            output_name="hpn-${GOOS}-${GOARCH}"
          fi
          
          echo "Building for ${GOOS}/${GOARCH}..."
          
          if GOOS=${GOOS} GOARCH=${GOARCH} CGO_ENABLED=0 go build \
            -ldflags "-X main.version=v1.1-ci -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o ${output_name} \
            ./cmd/hpn; then
            
            echo "✅ Successfully built ${output_name}"
            ls -lh ${output_name}
            
            # 测试当前平台的二进制文件
            if [ "$GOOS" = "linux" ] && [ "$GOARCH" = "amd64" ]; then
              echo "🧪 Testing binary:"
              ./${output_name} --version
            fi
          else
            echo "❌ Failed to build ${output_name}"
            exit 1
          fi
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cross-platform-binaries
        path: hpn-*
        retention-days: 7

  # 集成测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-suite, build-check]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'integration-test')
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build application
      run: go build -o hpn ./cmd/hpn

    - name: Create test image list
      run: |
        echo "hello-world:latest" > test-images.txt
        echo "alpine:3.18" >> test-images.txt

    - name: Test pull operation
      run: |
        chmod +x ./hpn
        echo "Testing pull operation..."
        ./hpn -a pull -f test-images.txt

    - name: Test save operation
      run: |
        echo "Testing save operation..."
        ./hpn -a save -f test-images.txt --save-mode 2
        ls -la images/ || echo "No images directory created"

    - name: Test load operation
      run: |
        echo "Testing load operation..."
        ./hpn -a load --load-mode 2 || echo "Load operation completed with warnings"

    - name: Test push to local registry
      run: |
        echo "Testing push to local registry..."
        # Tag images for local registry
        docker tag hello-world:latest localhost:5000/hello-world:latest
        docker push localhost:5000/hello-world:latest
        
        # Test hpn push to local registry
        echo "localhost:5000/hello-world:latest" > push-test.txt
        ./hpn -a push -f push-test.txt -r localhost:5000 -p test --push-mode 1 || echo "Push test completed (expected issues with local registry)"

  # 测试覆盖率检查
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [test-suite]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out ./...

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        
        THRESHOLD=70
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "⚠️  Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          echo "This is a warning, not blocking the build yet"
        else
          echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi

  # 分支特定检查
  branch-checks:
    name: Branch Specific Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check branch naming convention
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Checking branch name: $BRANCH_NAME"
        
        if [[ "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
          echo "✅ Branch name follows convention"
        elif [[ "$BRANCH_NAME" == "main" ]] || [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "✅ Main branch"
        else
          echo "❌ Branch name does not follow convention"
          echo "Expected patterns: feature/*, bugfix/*, hotfix/*, release/*"
          exit 1
        fi

    - name: Check PR size
      uses: actions/github-script@v6
      with:
        script: |
          const pr = context.payload.pull_request;
          const additions = pr.additions;
          const deletions = pr.deletions;
          const changes = additions + deletions;
          
          console.log(`PR changes: +${additions} -${deletions} (total: ${changes})`);
          
          const WARNING_THRESHOLD = 500;
          const ERROR_THRESHOLD = 1000;
          
          if (changes > ERROR_THRESHOLD) {
            core.setFailed(`PR is too large (${changes} changes). Consider splitting into smaller PRs.`);
          } else if (changes > WARNING_THRESHOLD) {
            core.warning(`PR is quite large (${changes} changes). Consider reviewing if it can be split.`);
          } else {
            console.log(`✅ PR size is reasonable (${changes} changes)`);
          }

  # CI总结
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-check, security-scan, test-suite, build-check, cross-compile, coverage-check]
    if: always()
    steps:
    - name: Check all required checks passed
      run: |
        echo "=== CI Pipeline Summary ==="
        
        LINT_STATUS="${{ needs.lint-check.result }}"
        SECURITY_STATUS="${{ needs.security-scan.result }}"
        TEST_STATUS="${{ needs.test-suite.result }}"
        BUILD_STATUS="${{ needs.build-check.result }}"
        CROSS_COMPILE_STATUS="${{ needs.cross-compile.result }}"
        COVERAGE_STATUS="${{ needs.coverage-check.result }}"
        
        echo "📋 Results:"
        echo "  Lint Check: $LINT_STATUS"
        echo "  Security Scan: $SECURITY_STATUS"
        echo "  Test Suite: $TEST_STATUS"
        echo "  Build Check: $BUILD_STATUS"
        echo "  Cross Compile: $CROSS_COMPILE_STATUS"
        echo "  Coverage Check: $COVERAGE_STATUS"
        
        # 检查必需的检查是否通过
        if [[ "$LINT_STATUS" != "success" ]] || \
           [[ "$SECURITY_STATUS" != "success" ]] || \
           [[ "$TEST_STATUS" != "success" ]] || \
           [[ "$BUILD_STATUS" != "success" ]] || \
           [[ "$CROSS_COMPILE_STATUS" != "success" ]]; then
          echo "❌ One or more required checks failed"
          exit 1
        else
          echo "✅ All required checks passed"
        fi