name: Code Quality

on:
  push:
    branches: [ main, develop, 'feature/*', 'bugfix/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整的代码质量检查
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write

env:
  GO_VERSION: '1.21'

jobs:
  # 代码格式检查
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check gofmt
      run: |
        echo "Checking code formatting with gofmt..."
        unformatted=$(gofmt -s -l .)
        if [ -n "$unformatted" ]; then
          echo "❌ The following files are not formatted properly:"
          echo "$unformatted"
          echo ""
          echo "Please run: gofmt -s -w ."
          exit 1
        else
          echo "✅ All files are properly formatted"
        fi

    - name: Check goimports
      run: |
        echo "Installing goimports..."
        go install golang.org/x/tools/cmd/goimports@latest
        
        echo "Checking import formatting..."
        unformatted=$(goimports -l .)
        if [ -n "$unformatted" ]; then
          echo "❌ The following files have incorrect imports:"
          echo "$unformatted"
          echo ""
          echo "Please run: goimports -w ."
          exit 1
        else
          echo "✅ All imports are properly formatted"
        fi

  # 静态代码分析
  lint-analysis:
    name: Lint Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: |
        echo "Running golangci-lint..."
        $(go env GOPATH)/bin/golangci-lint run --timeout=10m --out-format=github-actions

    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: |
          golangci-lint-report.xml
          golangci-lint-report.json
        retention-days: 7

  # 安全扫描
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: |
        echo "Running gosec security scanner..."
        gosec -fmt sarif -out gosec-results.sarif -fmt json -out gosec-results.json ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec-results.sarif

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          gosec-results.sarif
          gosec-results.json
        retention-days: 30

  # 漏洞检查
  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: |
        echo "Checking for known vulnerabilities..."
        govulncheck -json ./... > vuln-results.json || true

    - name: Process vulnerability results
      run: |
        if [ -s vuln-results.json ]; then
          echo "⚠️  Vulnerabilities found:"
          cat vuln-results.json
          
          # 检查是否有高危漏洞
          if grep -q '"severity":"HIGH"' vuln-results.json; then
            echo "❌ High severity vulnerabilities found!"
            exit 1
          else
            echo "⚠️  Low/Medium severity vulnerabilities found"
          fi
        else
          echo "✅ No vulnerabilities found"
        fi

    - name: Upload vulnerability results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: vulnerability-results
        path: vuln-results.json
        retention-days: 30

  # 代码复杂度分析
  complexity-analysis:
    name: Complexity Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install gocyclo
      run: go install github.com/fzipp/gocyclo/cmd/gocyclo@latest

    - name: Run cyclomatic complexity check
      run: |
        echo "Checking cyclomatic complexity..."
        gocyclo -over 15 . > complexity-results.txt || true
        
        if [ -s complexity-results.txt ]; then
          echo "⚠️  Functions with high complexity (>15):"
          cat complexity-results.txt
          
          # 检查是否有极高复杂度的函数
          if gocyclo -over 25 . | grep -q .; then
            echo "❌ Functions with very high complexity (>25) found!"
            gocyclo -over 25 .
            exit 1
          fi
        else
          echo "✅ All functions have acceptable complexity"
        fi

    - name: Upload complexity results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: complexity-results
        path: complexity-results.txt
        retention-days: 7

  # 代码重复检查
  duplication-check:
    name: Duplication Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dupl
      run: go install github.com/mibk/dupl@latest

    - name: Run duplication check
      run: |
        echo "Checking for code duplication..."
        dupl -threshold 100 . > duplication-results.txt || true
        
        if [ -s duplication-results.txt ]; then
          echo "⚠️  Code duplication found:"
          cat duplication-results.txt
          
          # 检查重复行数
          lines=$(wc -l < duplication-results.txt)
          if [ $lines -gt 20 ]; then
            echo "❌ Significant code duplication detected ($lines lines)"
            exit 1
          else
            echo "⚠️  Minor code duplication detected ($lines lines)"
          fi
        else
          echo "✅ No significant code duplication found"
        fi

    - name: Upload duplication results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: duplication-results
        path: duplication-results.txt
        retention-days: 7

  # 测试覆盖率分析
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage analysis..."
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        echo "Generating coverage reports..."
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out > coverage-summary.txt
        
        # 提取总覆盖率
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        echo "Total coverage: ${COVERAGE}%"

    - name: Check coverage thresholds
      run: |
        echo "Checking coverage thresholds..."
        
        MINIMUM_COVERAGE=70
        TARGET_COVERAGE=80
        EXCELLENT_COVERAGE=90
        
        if (( $(echo "$COVERAGE >= $EXCELLENT_COVERAGE" | bc -l) )); then
          echo "🎉 Excellent coverage: ${COVERAGE}% (>= ${EXCELLENT_COVERAGE}%)"
        elif (( $(echo "$COVERAGE >= $TARGET_COVERAGE" | bc -l) )); then
          echo "✅ Good coverage: ${COVERAGE}% (>= ${TARGET_COVERAGE}%)"
        elif (( $(echo "$COVERAGE >= $MINIMUM_COVERAGE" | bc -l) )); then
          echo "⚠️  Acceptable coverage: ${COVERAGE}% (>= ${MINIMUM_COVERAGE}%)"
        else
          echo "❌ Insufficient coverage: ${COVERAGE}% (< ${MINIMUM_COVERAGE}%)"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
          coverage-summary.txt
        retention-days: 30

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const coverage = process.env.COVERAGE;
          
          let emoji = '❌';
          let status = 'Poor';
          
          if (coverage >= 90) {
            emoji = '🎉';
            status = 'Excellent';
          } else if (coverage >= 80) {
            emoji = '✅';
            status = 'Good';
          } else if (coverage >= 70) {
            emoji = '⚠️';
            status = 'Acceptable';
          }
          
          const comment = `## ${emoji} Test Coverage Report
          
          **Coverage: ${coverage}%** (${status})
          
          | Threshold | Status |
          |-----------|--------|
          | Minimum (70%) | ${coverage >= 70 ? '✅' : '❌'} |
          | Target (80%) | ${coverage >= 80 ? '✅' : '❌'} |
          | Excellent (90%) | ${coverage >= 90 ? '✅' : '❌'} |
          
          [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # 依赖分析
  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Analyze dependencies
      run: |
        echo "Analyzing Go module dependencies..."
        
        echo "=== Direct Dependencies ==="
        go list -m -f '{{.Path}} {{.Version}}' all | grep -v "$(go list -m)"
        
        echo ""
        echo "=== Dependency Graph ==="
        go mod graph | head -20
        
        echo ""
        echo "=== Module Information ==="
        go list -m -json all > dependencies.json

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        go list -u -m all | grep -E '\[.*\]' > outdated-deps.txt || true
        
        if [ -s outdated-deps.txt ]; then
          echo "⚠️  Outdated dependencies found:"
          cat outdated-deps.txt
        else
          echo "✅ All dependencies are up to date"
        fi

    - name: Validate go.mod
      run: |
        echo "Validating go.mod and go.sum..."
        go mod tidy
        
        if ! git diff --quiet go.mod go.sum; then
          echo "❌ go.mod or go.sum needs to be updated"
          echo "Changes needed:"
          git diff go.mod go.sum
          exit 1
        else
          echo "✅ go.mod and go.sum are clean"
        fi

    - name: Upload dependency analysis
      uses: actions/upload-artifact@v3
      with:
        name: dependency-analysis
        path: |
          dependencies.json
          outdated-deps.txt
        retention-days: 7

  # 代码质量总结
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [format-check, lint-analysis, security-analysis, vulnerability-check, complexity-analysis, duplication-check, coverage-analysis, dependency-analysis]
    if: always()
    steps:
    - name: Generate quality report
      run: |
        echo "=== Code Quality Summary ===" > quality-report.md
        echo "" >> quality-report.md
        
        # 检查各项检查的状态
        FORMAT_STATUS="${{ needs.format-check.result }}"
        LINT_STATUS="${{ needs.lint-analysis.result }}"
        SECURITY_STATUS="${{ needs.security-analysis.result }}"
        VULN_STATUS="${{ needs.vulnerability-check.result }}"
        COMPLEXITY_STATUS="${{ needs.complexity-analysis.result }}"
        DUPLICATION_STATUS="${{ needs.duplication-check.result }}"
        COVERAGE_STATUS="${{ needs.coverage-analysis.result }}"
        DEPENDENCY_STATUS="${{ needs.dependency-analysis.result }}"
        
        echo "| Check | Status |" >> quality-report.md
        echo "|-------|--------|" >> quality-report.md
        echo "| Format Check | ${FORMAT_STATUS} |" >> quality-report.md
        echo "| Lint Analysis | ${LINT_STATUS} |" >> quality-report.md
        echo "| Security Analysis | ${SECURITY_STATUS} |" >> quality-report.md
        echo "| Vulnerability Check | ${VULN_STATUS} |" >> quality-report.md
        echo "| Complexity Analysis | ${COMPLEXITY_STATUS} |" >> quality-report.md
        echo "| Duplication Check | ${DUPLICATION_STATUS} |" >> quality-report.md
        echo "| Coverage Analysis | ${COVERAGE_STATUS} |" >> quality-report.md
        echo "| Dependency Analysis | ${DEPENDENCY_STATUS} |" >> quality-report.md
        
        cat quality-report.md

    - name: Check overall quality
      run: |
        # 计算通过的检查数量
        PASSED=0
        TOTAL=8
        
        [[ "${{ needs.format-check.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.lint-analysis.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.security-analysis.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.vulnerability-check.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.complexity-analysis.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.duplication-check.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.coverage-analysis.result }}" == "success" ]] && ((PASSED++))
        [[ "${{ needs.dependency-analysis.result }}" == "success" ]] && ((PASSED++))
        
        PERCENTAGE=$((PASSED * 100 / TOTAL))
        
        echo "Quality Score: $PASSED/$TOTAL ($PERCENTAGE%)"
        
        if [ $PERCENTAGE -ge 90 ]; then
          echo "🎉 Excellent code quality!"
        elif [ $PERCENTAGE -ge 75 ]; then
          echo "✅ Good code quality"
        elif [ $PERCENTAGE -ge 60 ]; then
          echo "⚠️  Acceptable code quality, room for improvement"
        else
          echo "❌ Poor code quality, significant improvements needed"
          exit 1
        fi