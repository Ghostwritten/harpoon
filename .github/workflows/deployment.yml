name: Deployment

on:
  push:
    branches: [ develop, 'release/*' ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      version:
        description: 'Version to deploy (optional)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  deployments: write

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 确定部署环境和版本
  determine-deployment:
    name: Determine Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.env.outputs.version }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
      deployment-type: ${{ steps.env.outputs.deployment-type }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine environment and version
      id: env
      run: |
        # 确定部署环境
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          VERSION="${{ github.event.inputs.version }}"
          DEPLOYMENT_TYPE="manual"
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          ENVIRONMENT="development"
          VERSION="develop-$(git rev-parse --short HEAD)"
          DEPLOYMENT_TYPE="automatic"
        elif [[ "${{ github.ref }}" =~ ^refs/heads/release/ ]]; then
          ENVIRONMENT="staging"
          VERSION="${GITHUB_REF#refs/heads/release/}"
          DEPLOYMENT_TYPE="automatic"
        elif [ "${{ github.event.pull_request.merged }}" = "true" ] && [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
          ENVIRONMENT="production"
          VERSION="main-$(git rev-parse --short HEAD)"
          DEPLOYMENT_TYPE="automatic"
        else
          ENVIRONMENT="none"
          VERSION=""
          DEPLOYMENT_TYPE="none"
        fi
        
        # 确定是否应该部署
        if [ "$ENVIRONMENT" = "none" ]; then
          SHOULD_DEPLOY="false"
        else
          SHOULD_DEPLOY="true"
        fi
        
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        echo "deployment-type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
        
        echo "🎯 Deployment Configuration:"
        echo "  Environment: $ENVIRONMENT"
        echo "  Version: $VERSION"
        echo "  Should Deploy: $SHOULD_DEPLOY"
        echo "  Deployment Type: $DEPLOYMENT_TYPE"

  # 构建部署镜像
  build-deployment-image:
    name: Build Deployment Image
    runs-on: ubuntu-latest
    needs: determine-deployment
    if: needs.determine-deployment.outputs.should-deploy == 'true'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.determine-deployment.outputs.version }}
          type=raw,value=${{ needs.determine-deployment.outputs.environment }}-latest
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.determine-deployment.outputs.version }}
          COMMIT=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 开发环境部署
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [determine-deployment, build-deployment-image]
    if: needs.determine-deployment.outputs.environment == 'development'
    environment:
      name: development
      url: https://dev.harpoon.example.com
    steps:
    - name: Create deployment
      uses: actions/github-script@v6
      id: deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'development',
            description: 'Deploy to development environment',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;

    - name: Deploy to development environment
      run: |
        echo "🚀 Deploying to development environment..."
        echo "Image: ${{ needs.build-deployment-image.outputs.image-tag }}"
        echo "Version: ${{ needs.determine-deployment.outputs.version }}"
        
        # 模拟部署过程
        echo "📦 Pulling latest image..."
        # docker pull ${{ needs.build-deployment-image.outputs.image-tag }}
        
        echo "🔄 Updating development deployment..."
        # kubectl set image deployment/harpoon-dev harpoon=${{ needs.build-deployment-image.outputs.image-tag }}
        
        echo "⏳ Waiting for rollout to complete..."
        sleep 10
        
        echo "✅ Development deployment completed successfully!"

    - name: Run health checks
      run: |
        echo "🏥 Running health checks..."
        
        # 模拟健康检查
        echo "Checking application health..."
        # curl -f https://dev.harpoon.example.com/health || exit 1
        
        echo "Checking version endpoint..."
        # curl -f https://dev.harpoon.example.com/version || exit 1
        
        echo "✅ All health checks passed!"

    - name: Update deployment status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const deploymentId = ${{ steps.deployment.outputs.result }};
          const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deploymentId,
            state: state,
            description: state === 'success' ? 'Deployment successful' : 'Deployment failed',
            environment_url: 'https://dev.harpoon.example.com'
          });

  # 测试环境部署
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-deployment, build-deployment-image]
    if: needs.determine-deployment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.harpoon.example.com
    steps:
    - name: Create deployment
      uses: actions/github-script@v6
      id: deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'staging',
            description: 'Deploy to staging environment',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;

    - name: Deploy to staging environment
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ needs.build-deployment-image.outputs.image-tag }}"
        echo "Version: ${{ needs.determine-deployment.outputs.version }}"
        
        echo "📦 Pulling latest image..."
        # docker pull ${{ needs.build-deployment-image.outputs.image-tag }}
        
        echo "🔄 Updating staging deployment..."
        # kubectl set image deployment/harpoon-staging harpoon=${{ needs.build-deployment-image.outputs.image-tag }}
        
        echo "⏳ Waiting for rollout to complete..."
        sleep 15
        
        echo "✅ Staging deployment completed successfully!"

    - name: Run integration tests
      run: |
        echo "🧪 Running integration tests on staging..."
        
        # 模拟集成测试
        echo "Testing API endpoints..."
        # newman run tests/integration/api-tests.json --env-var baseUrl=https://staging.harpoon.example.com
        
        echo "Testing user workflows..."
        # cypress run --config baseUrl=https://staging.harpoon.example.com
        
        echo "✅ All integration tests passed!"

    - name: Run performance tests
      run: |
        echo "⚡ Running performance tests..."
        
        # 模拟性能测试
        echo "Load testing with 100 concurrent users..."
        # k6 run --vus 100 --duration 5m tests/performance/load-test.js
        
        echo "✅ Performance tests completed!"

    - name: Update deployment status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const deploymentId = ${{ steps.deployment.outputs.result }};
          const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deploymentId,
            state: state,
            description: state === 'success' ? 'Deployment successful' : 'Deployment failed',
            environment_url: 'https://staging.harpoon.example.com'
          });

  # 生产环境部署
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-deployment, build-deployment-image]
    if: needs.determine-deployment.outputs.environment == 'production'
    environment:
      name: production
      url: https://harpoon.example.com
    steps:
    - name: Create deployment
      uses: actions/github-script@v6
      id: deployment
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Deploy to production environment',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;

    - name: Pre-deployment checks
      run: |
        echo "🔍 Running pre-deployment checks..."
        
        # 检查staging环境状态
        echo "Verifying staging environment health..."
        # curl -f https://staging.harpoon.example.com/health || exit 1
        
        # 检查数据库迁移
        echo "Checking database migrations..."
        # kubectl exec deployment/harpoon-staging -- ./hpn migrate --dry-run
        
        echo "✅ Pre-deployment checks passed!"

    - name: Deploy to production (Blue-Green)
      run: |
        echo "🚀 Starting blue-green deployment to production..."
        echo "Image: ${{ needs.build-deployment-image.outputs.image-tag }}"
        echo "Version: ${{ needs.determine-deployment.outputs.version }}"
        
        # 蓝绿部署流程
        echo "📦 Deploying to green environment..."
        # kubectl set image deployment/harpoon-green harpoon=${{ needs.build-deployment-image.outputs.image-tag }}
        
        echo "⏳ Waiting for green deployment to be ready..."
        # kubectl rollout status deployment/harpoon-green --timeout=300s
        
        echo "🏥 Running health checks on green environment..."
        sleep 20
        # curl -f https://green.harpoon.example.com/health || exit 1
        
        echo "🔄 Switching traffic to green environment..."
        # kubectl patch service harpoon-service -p '{"spec":{"selector":{"version":"green"}}}'
        
        echo "⏳ Waiting for traffic switch to complete..."
        sleep 10
        
        echo "🏥 Final health check on production..."
        # curl -f https://harpoon.example.com/health || exit 1
        
        echo "✅ Production deployment completed successfully!"

    - name: Post-deployment verification
      run: |
        echo "🔍 Running post-deployment verification..."
        
        # 验证关键功能
        echo "Testing critical user paths..."
        # cypress run --config baseUrl=https://harpoon.example.com --spec "tests/e2e/critical-paths.cy.js"
        
        # 检查监控指标
        echo "Checking monitoring metrics..."
        # curl -f https://monitoring.harpoon.example.com/api/v1/query?query=up{job="harpoon"}
        
        echo "✅ Post-deployment verification completed!"

    - name: Update deployment status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const deploymentId = ${{ steps.deployment.outputs.result }};
          const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deploymentId,
            state: state,
            description: state === 'success' ? 'Deployment successful' : 'Deployment failed',
            environment_url: 'https://harpoon.example.com'
          });

  # 部署回滚
  rollback-deployment:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-development.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [determine-deployment, deploy-development, deploy-staging, deploy-production]
    steps:
    - name: Determine rollback target
      id: rollback
      run: |
        ENVIRONMENT="${{ needs.determine-deployment.outputs.environment }}"
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "🔄 Initiating rollback for environment: $ENVIRONMENT"

    - name: Rollback deployment
      run: |
        ENVIRONMENT="${{ steps.rollback.outputs.environment }}"
        
        echo "🔄 Rolling back $ENVIRONMENT deployment..."
        
        case "$ENVIRONMENT" in
          "development")
            echo "Rolling back development deployment..."
            # kubectl rollout undo deployment/harpoon-dev
            ;;
          "staging")
            echo "Rolling back staging deployment..."
            # kubectl rollout undo deployment/harpoon-staging
            ;;
          "production")
            echo "Rolling back production deployment..."
            # kubectl patch service harpoon-service -p '{"spec":{"selector":{"version":"blue"}}}'
            ;;
        esac
        
        echo "⏳ Waiting for rollback to complete..."
        sleep 30
        
        echo "✅ Rollback completed successfully!"

    - name: Verify rollback
      run: |
        ENVIRONMENT="${{ steps.rollback.outputs.environment }}"
        
        case "$ENVIRONMENT" in
          "development")
            URL="https://dev.harpoon.example.com"
            ;;
          "staging")
            URL="https://staging.harpoon.example.com"
            ;;
          "production")
            URL="https://harpoon.example.com"
            ;;
        esac
        
        echo "🏥 Verifying rollback health at $URL..."
        # curl -f $URL/health || exit 1
        
        echo "✅ Rollback verification successful!"

  # 部署通知
  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [determine-deployment, deploy-development, deploy-staging, deploy-production]
    if: always() && needs.determine-deployment.outputs.should-deploy == 'true'
    steps:
    - name: Generate deployment summary
      run: |
        ENVIRONMENT="${{ needs.determine-deployment.outputs.environment }}"
        VERSION="${{ needs.determine-deployment.outputs.version }}"
        DEPLOYMENT_TYPE="${{ needs.determine-deployment.outputs.deployment-type }}"
        
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: $DEPLOYMENT_TYPE" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        
        case "$ENVIRONMENT" in
          "development")
            STATUS="${{ needs.deploy-development.result }}"
            URL="https://dev.harpoon.example.com"
            ;;
          "staging")
            STATUS="${{ needs.deploy-staging.result }}"
            URL="https://staging.harpoon.example.com"
            ;;
          "production")
            STATUS="${{ needs.deploy-production.result }}"
            URL="https://harpoon.example.com"
            ;;
        esac
        
        if [ "$STATUS" = "success" ]; then
          echo "✅ **Deployment Status**: Success" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Environment URL**: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment Status**: Failed" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Rollback**: Initiated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        
        if [ "$STATUS" = "success" ]; then
          echo "1. Verify the deployment at $URL" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor application metrics" >> $GITHUB_STEP_SUMMARY
          echo "3. Run smoke tests if needed" >> $GITHUB_STEP_SUMMARY
        else
          echo "1. Check deployment logs for errors" >> $GITHUB_STEP_SUMMARY
          echo "2. Verify rollback completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "3. Fix issues and retry deployment" >> $GITHUB_STEP_SUMMARY
        fi