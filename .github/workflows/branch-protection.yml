name: Branch Protection Checks

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]

permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  # 基础代码质量检查
  lint-check:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: |
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run gosec
      run: gosec -fmt json -out gosec-report.json -stdout ./...

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: gosec-report.json

  # 构建检查
  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build application
      run: go build -v ./cmd/hpn

    - name: Verify build artifacts
      run: |
        if [ ! -f "./hpn" ]; then
          echo "Build failed: binary not found"
          exit 1
        fi
        ./hpn --version

  # 测试套件
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest'
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  # 测试覆盖率检查
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: test-suite
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out ./...

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        
        THRESHOLD=80
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          exit 1
        else
          echo "Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi

  # 分支命名检查
  branch-naming-check:
    name: Branch Naming Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check branch naming convention
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Checking branch name: $BRANCH_NAME"
        
        # 允许的分支名称模式
        if [[ "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release)/.+ ]]; then
          echo "✅ Branch name follows convention"
        elif [[ "$BRANCH_NAME" == "main" ]] || [[ "$BRANCH_NAME" == "develop" ]]; then
          echo "✅ Main branch"
        else
          echo "❌ Branch name does not follow convention"
          echo "Expected patterns: feature/*, bugfix/*, hotfix/*, release/*"
          exit 1
        fi

  # Commit消息检查
  commit-message-check:
    name: Commit Message Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check commit messages
      run: |
        # 获取PR中的所有commit
        COMMITS=$(git rev-list --no-merges ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        for commit in $COMMITS; do
          MESSAGE=$(git log --format=%s -n 1 $commit)
          echo "Checking commit: $commit"
          echo "Message: $MESSAGE"
          
          # 检查commit消息格式 (type: description 或 type(scope): description)
          if [[ "$MESSAGE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci)(\(.+\))?: .+ ]]; then
            echo "✅ Commit message follows convention"
          else
            echo "❌ Commit message does not follow convention"
            echo "Expected format: type(scope): description"
            echo "Types: feat, fix, docs, style, refactor, test, chore, perf, ci"
            exit 1
          fi
        done

  # PR大小检查
  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Check PR size
      uses: actions/github-script@v6
      with:
        script: |
          const pr = context.payload.pull_request;
          const additions = pr.additions;
          const deletions = pr.deletions;
          const changes = additions + deletions;
          
          console.log(`PR changes: +${additions} -${deletions} (total: ${changes})`);
          
          // 设置阈值
          const WARNING_THRESHOLD = 500;
          const ERROR_THRESHOLD = 1000;
          
          if (changes > ERROR_THRESHOLD) {
            core.setFailed(`PR is too large (${changes} changes). Consider splitting into smaller PRs.`);
          } else if (changes > WARNING_THRESHOLD) {
            core.warning(`PR is quite large (${changes} changes). Consider reviewing if it can be split.`);
          } else {
            console.log(`✅ PR size is reasonable (${changes} changes)`);
          }

  # 依赖检查
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Verify dependencies
      run: |
        go mod verify
        go mod tidy
        
        # 检查是否有未提交的go.mod/go.sum变更
        if ! git diff --quiet go.mod go.sum; then
          echo "❌ go.mod or go.sum has uncommitted changes"
          git diff go.mod go.sum
          exit 1
        fi

  # 汇总检查结果
  protection-summary:
    name: Protection Summary
    runs-on: ubuntu-latest
    needs: [lint-check, security-scan, build-check, test-suite, coverage-check, dependency-check]
    if: always()
    steps:
    - name: Check all required checks passed
      run: |
        echo "=== Branch Protection Check Summary ==="
        
        # 检查各个job的状态
        LINT_STATUS="${{ needs.lint-check.result }}"
        SECURITY_STATUS="${{ needs.security-scan.result }}"
        BUILD_STATUS="${{ needs.build-check.result }}"
        TEST_STATUS="${{ needs.test-suite.result }}"
        COVERAGE_STATUS="${{ needs.coverage-check.result }}"
        DEPENDENCY_STATUS="${{ needs.dependency-check.result }}"
        
        echo "Lint Check: $LINT_STATUS"
        echo "Security Scan: $SECURITY_STATUS"
        echo "Build Check: $BUILD_STATUS"
        echo "Test Suite: $TEST_STATUS"
        echo "Coverage Check: $COVERAGE_STATUS"
        echo "Dependency Check: $DEPENDENCY_STATUS"
        
        # 如果任何必需检查失败，则失败
        if [[ "$LINT_STATUS" != "success" ]] || \
           [[ "$SECURITY_STATUS" != "success" ]] || \
           [[ "$BUILD_STATUS" != "success" ]] || \
           [[ "$TEST_STATUS" != "success" ]] || \
           [[ "$COVERAGE_STATUS" != "success" ]] || \
           [[ "$DEPENDENCY_STATUS" != "success" ]]; then
          echo "❌ One or more required checks failed"
          exit 1
        else
          echo "✅ All required checks passed"
        fi